syntax = "proto3";

option go_package = "apron.network/gateway/models";

message ApronApiKey {
  string key = 1;
  string service_id = 2;
  int64 issued_at = 3;
  int64 expired_at = 4;
  string account_id = 5;
}

message ApronServiceProvider {
  string id = 1;
  string name = 2;
  string desc = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
  string extra_detail = 6;

  string base_url = 20;
  string schema = 21;
}

message ApronService {
  // Uniq id for service, will be generated automatically
  string id = 1;

  // hostname provides this service, will be used to search service while forwarding requesting.
  string domain_name = 2;

  // Providers for this service
  repeated ApronServiceProvider providers = 10;
}

message ApronUser {
  string email = 1;
}

message AccessLog {
  int64 ts = 1;
  string service_name = 2;
  string user_key = 3;
  string request_ip = 4;
  string request_path = 5;
}

//message RequestDetail {
//  // http, https, ws or wss
//  string schema = 1;
//
//  enum HttpMethod {
//    UNKNOWN = 0;
//    GET = 1;
//    POST = 2;
//    PUT = 3;
//    DELETE = 4;
//  }
//  HttpMethod http_method = 2;
//
//
////  bytes host = 3;
////  bytes path = 4;  // full path of forward request
////  bytes service_name = 5;
////  bytes user_key = 6; // identify for the request sender
////
////  // Other detail data for querying services
////  bytes header_data = 10;
////  string query_params = 11;
////  string form_params = 12;
////  bytes body_params = 13;
////  bytes cookies = 14;
////  bytes proxy_request_path = 15; // path sent to service
////  uint64 version = 16;
//}

message ApronServiceRequest {
  // Service id indicate the service, which will be used to fetch service detail in service side node
  string service_id = 1;

  // request_id is used to distinguish various requests in same stream. The request id will be sent to remote node,
  // and all response from remote node for this request will have this id attached, then the sender node can pass
  // the request to correct client.
  string request_id = 2;

  // request sender peer id, used to create response stream in remote node
  string peer_id = 3;

  // Client request schema, http/https/ws/wss
  bytes client_schema = 4;

  // raw request data, serialized from fasthttp request
  bytes raw_request = 10;
}

message ApronServiceResponse {
  string peer_id = 1;
  string request_id = 2;
  bytes raw_response = 10;
}
