syntax = "proto3";

option go_package = "apron.network/gateway/models";

enum NetworkType {
  UNKNOWN = 0;
  Tcp4 = 1;
  Tcp6 = 2;
  Udp4 = 3;
  Udp6 = 4;
}

message ApronApiKey {
  string key = 1;
  string service_id = 2;
  int64 issued_at = 3;
  int64 expired_at = 4;
  string account_id = 5;
}

message ApronServiceProvider {
  // TODO: Those fields are not using now, will be activated later
  string id = 1;
  string name = 2;
  string desc = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
  string extra_detail = 6;

  string base_url = 20;
  string schema = 21;   // schema is used for specifying url protocol

  // network_type indicates network type, (tcp/udp and v4/6).
  // For http/ws requests, currently this field will be ignored since only tcp4 is available.
  // For other requests, this field is used for selecting appropriate tcp/udp and v4/v6 handler
  NetworkType network_type = 22;
}

// {
//  "id": "asdasdfa",
//  "name": "Httpbin",
//  "desc": "httpbin service for testing purpose.",
//  "logo": "https://via.placeholder.com/150?text=httpbin",
//  "usage": "Just run the command `curl http://bob.example.com:8081`. More information please refer the official documents.",
//  "user_id": "0xblahblahblah",
//  "providers": [
//    {
//      "base_url": "https://httpbin.org/anything",
//      "schema": "http"
//    }
//  ]}

message ApronService {
  // Uniq id for service, will be generated automatically
  string id = 1;

  // name of this service
  string name = 2;

  // Description of the service
  string desc = 3;

  // Logo image path for the service
  string logo = 4;

  // Brief usage
  string usage = 5;

  // Creator's user id
  string user_id = 6;

  // Providers for this service
  repeated ApronServiceProvider providers = 10;

  bool is_deleted = 11;
}

message ApronUser {
  string email = 1;
}

message AccessLog {
  int64 ts = 1;
  string service_name = 2;
  string user_key = 3;
  string request_ip = 4;
  string request_path = 5;
}

//message RequestDetail {
//  // http, https, ws or wss
//  string schema = 1;
//
//  enum HttpMethod {
//    UNKNOWN = 0;
//    GET = 1;
//    POST = 2;
//    PUT = 3;
//    DELETE = 4;
//  }
//  HttpMethod http_method = 2;
//
//
////  bytes host = 3;
////  bytes path = 4;  // full path of forward request
////  bytes service_name = 5;
////  bytes user_key = 6; // identify for the request sender
////
////  // Other detail data for querying services
////  bytes header_data = 10;
////  string query_params = 11;
////  string form_params = 12;
////  bytes body_params = 13;
////  bytes cookies = 14;
////  bytes proxy_request_path = 15; // path sent to service
////  uint64 version = 16;
//}

message ApronServiceRequest {
  // Service id indicate the service, which will be used to fetch service detail in service side node
  string service_id = 1;

  // request_id is used to distinguish various requests in same stream. The request id will be sent to remote node,
  // and all response from remote node for this request will have this id attached, then the sender node can pass
  // the request to correct client.
  string request_id = 2;

  // request sender peer id, used to create response stream in remote node
  string peer_id = 3;

  // Whether client request is ws, includes ws and wss
  bool is_ws_request = 4;

  // raw request data, serialized from fasthttp request
  bytes raw_request = 10;
}


message ApronServiceData {
  string request_id = 2;
  bytes raw_data = 10;
}

message ApronUsageRecord {
  string user_key = 1;
  string service_id = 2;
  int64 start_ts = 3;
  int64 end_ts = 4;

  uint64 access_count = 10;
  uint64 upload_traffic = 11;
  uint64 download_traffic = 12;
}

// NodeReport contains all usage records recorded on the node
message NodeReport {
  string node_id = 1;
  repeated ApronUsageRecord records = 10;
}

// ApronSocketInitRequest is sent from client side to ClientSideGateway, which contains service_id the client required, and user_id for charging.
// After receiving this request, ClientSideGateway will try to connect with ServiceSideGateway from its services list.
message ApronSocketInitRequest {
  string service_id = 1;
  string request_id = 2;
  string peer_id = 3;
  string user_id = 4;
}

// Message indicates this request is used for socket connection
// This message is similar with ApronServiceRequest, creating new message can minimize side effect to existing logic
// This request can only indicate ServiceSideGateway to connect to service, no additional data can be passed in this request
message ApronSocketServiceRequest {
  string service_id = 1;
  string request_id = 2;
  string peer_id = 3;
}
